#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
from datetime import date, datetime
from pathlib import Path

from jinja2 import Environment, FileSystemLoader

from raw import db

SCHEMAS = os.getenv("SCHEMAS", "public").split(" ")


def list_tables():
    """
    Executes query_files/tables.sql query, flattens results to a list of tuples
    like (<schema_name>, <table_name>)
    """
    schema_param = dict(schemas=SCHEMAS)
    result = db.result_by_name("tables", returns="tuples", **schema_param)
    tables = []
    for t in result:
        tables.append(t)
    return tables


def query_result(tbltup, query_name):
    """
    Executes query, returns results as list of dicts

    Usage:
    `tbltup`: a tuple like (<schema_name>, <table_name>)
        [tuples like these are generated by list_tables()]
    `query_name`: stem name of the query to be executed
    """
    table_params = dict(schm=tbltup[0], tbl=tbltup[1])
    result = db.result_by_name(query_name, **table_params)
    return result


def render_template(tbltup, template_name, query_name=None):
    """
    For a given table (specified by `tbltup` with (<schema_name>, <table_name>))
    get the `template_name` jinja template and render with the `query_name` results.

    Outputs markdown string.
    """
    loader = FileSystemLoader("templates")
    env = Environment(loader=loader)
    template = env.get_template(f"{template_name}.j2")

    current_date = date.today().isoformat()

    column_list = []
    if query_name:
        column_list = query_result(tbltup, query_name)

    output = template.render(
        schema_name=tbltup[0],
        table_name=tbltup[1],
        column_list=column_list,
        current_date=current_date,
    )
    return output


def save_markdown(tbltup):
    """
    Call `render_table_columns()` on tbltup, and save results to file
    """
    outpath = Path("dictionary", "content")

    table_name = tbltup[1]
    schema_name = tbltup[0]
    filename = f"{schema_name}.{table_name}.md"

    outfile = Path(outpath, filename)
    timestamp = datetime.utcnow().isoformat(sep=" ", timespec="seconds")
    with open(outfile, "w") as table_output:
        # TODO: refactor this to something more abstract/dynamic?
        # This feels gauche and repetitive
        header = render_template(tbltup, "header")
        table_output.write(header)

        columns = render_template(tbltup, "table_columns", "attributes")
        table_output.write(columns)

        keys = render_template(tbltup, "keys", "keys")
        table_output.write(keys)

        related = render_template(tbltup, "related_tables", "related")
        table_output.write(related)

        table_output.write(f"\nGenerated at: {timestamp} UTC")


def main():
    """`
    Call `list_tables()` and iterate over results, calling `save_markdown()` on each
    """
    # clean output directory
    outpath = Path("dictionary", "content")
    [f.unlink() for f in outpath.glob("*") if f.is_file() and f.suffix == ".md"]

    # get all tables, and save markdown output for each
    tbls = list_tables()
    for tbltup in tbls:
        save_markdown(tbltup)
    print(f"{len(tbls)} files written to {outpath}")


if __name__ == "__main__":
    main()
